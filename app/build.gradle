buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.20.1'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

def isWindows = { ->
    return System.properties['os.name'].toLowerCase().contains('windows')
}

def getVersionCode = { ->
    if (isWindows()) return 1
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine "bash", "-c", "git rev-list HEAD | wc -l"
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim())
    }
    catch (ignored) {
        return -1;
    }
}

def getVersionName = { ->
    if (isWindows()) return "1.0"
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine "bash", "-c", "git for-each-ref --sort=taggerdate --format '%(tag)' refs/tags | tail -n 1"
            standardOutput = stdout
            if (stdout == null) return "1.0"
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return -1;
    }
}

def initFabricPropertiesIfNeeded() {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated fabric property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: CrashlyticsApiSecret)
            entry(key: "apiKey", value: CrashlyticsApiKey)
        }
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.artzmb.hhkl"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode getVersionCode()
        versionName getVersionName()
    }
    buildTypes {

        debug {
            // disable crashlytics
            buildConfigField "boolean", "USE_CRASHLYTICS", "false"
            ext.enableCrashlytics = false
        }
        release {
            // enable crashlytics
            buildConfigField "boolean", "USE_CRASHLYTICS", "true"
            ext.enableCrashlytics = true

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

afterEvaluate {
    initFabricPropertiesIfNeeded()
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:design:23.1.1'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.android.support:cardview-v7:23.1.1'
    compile('com.crashlytics.sdk.android:crashlytics:2.5.3@aar') {
        transitive = true;
    }
}
